{"version":3,"sources":["logo.svg","components/Nav.js","components/Header.js","components/Image.js","components/ResultContainer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","props","react_default","a","createElement","className","href","demonstrate","message","score","topScore","Header","Image","results","map","result","role","id","value","style","backgroundImage","url","onClick","handleOnClick","shuffle","obj","array","_i","_entries","Object","entries","length","_ref3","_ref2","slicedToArray","push","temporaryValue","randomIndex","currentIndex","Math","floor","random","ReactContainer","state","img","1","clicked","2","3","4","5","6","7","8","9","10","11","12","images","event","target","_this","key","setState","setTimeout","ele","this","Nav","components_Header","components_Image","Component","App","ResultContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a6ea3b0b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\n\nfunction Navbar(props) {\n    return(\n        <nav className=\"navbar\">\n            <ul>\n                <li className=\"brand\">\n                    <a href=\"/\">Clicky Game</a>\n                </li>\n                <li className={props.demonstrate}>{props.message}</li>\n                <li>Score: {props.score} | Top Score: {props.topScore}</li>\n            </ul>\n        </nav>\n    );\n}\n\nexport default Navbar;","import React from \"react\";\n\nfunction Header() {\n    return(\n        <header className=\"header\">\n            <h1>Clicky Game!</h1>\n            <h2>Click on an image to earn points, but don't click on any more than once!</h2>\n        </header>\n    );\n}\n\nexport default Header;","import React from \"react\";\n\nfunction Image(props) {\n    return(\n        <main className=\"container\">\n            {props.results.map(result => (\n                <div role=\"img\" id={result.value.id} className=\"click-item\" style={{backgroundImage: 'url(' + result.value.url + ')'}} onClick={props.handleOnClick}></div>\n            ))}\n        </main>\n    );\n}\n\nexport default Image;","import React, { Component } from \"react\";\nimport Navbar from \"./Nav\";\nimport Header from \"./Header\";\nimport Image from \"./Image\";\n\nfunction shuffle(obj) {\n    let array = [];\n    const entries = Object.entries(obj);\n    for (const [key, value] of entries) {\n        array.push({value});\n    }\n    var currentIndex = array.length, temporaryValue, randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        // And swap it with the current element.\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n}\n\nclass ReactContainer extends Component {\n    state = {\n        score: 0,\n        topScore: 0,\n        demonstrate: \"\",\n        message: \"Click an image to begin!\",\n        img: {\n            1: {\n                id: 1,\n                clicked: false,\n                url: \"/assets/images/beth.jpeg\"\n            },\n            2: {\n                id: 2,\n                clicked: false,\n                url: \"/assets/images/birdperson.jpeg\"\n            },\n            3: {\n                id: 3,\n                clicked: false,\n                url: \"/assets/images/evilmorty.jpeg\"\n            },\n            4: {\n                id: 4,\n                clicked: false,\n                url: \"/assets/images/gianthead.jpeg\"\n            },\n            5: {\n                id: 5,\n                clicked: false,\n                url: \"/assets/images/goldenfold.jpeg\"\n            },\n            6: {\n                id: 6,\n                clicked: false,\n                url: \"/assets/images/jerry.jpeg\"\n            },\n            7: {\n                id: 7,\n                clicked: false,\n                url: \"/assets/images/jussica.jpeg\"\n            },\n            8: {\n                id: 8,\n                clicked: false,\n                url: \"/assets/images/meeseek.jpeg\"\n            },\n            9: {\n                id: 9,\n                clicked: false,\n                url: \"/assets/images/morty.jpeg\"\n            },\n            10: {\n                id: 10,\n                clicked: false,\n                url: \"/assets/images/mr.jpeg\"\n            },\n            11: {\n                id: 11,\n                clicked: false,\n                url: \"/assets/images/rick.jpeg\"\n            },\n            12: {\n                id: 12,\n                clicked: false,\n                url: \"/assets/images/summer.jpeg\"\n            }\n        },\n        images: []\n    }\n\n    handleOnClick = event => {\n        const id = event.target.id;\n\n        // include if clicked is already true\n        if (this.state.score === 12 ) {\n            let obj = this.state.img;\n            for (var key in obj) {\n                obj[key].clicked = false;\n            }\n            this.setState({\n                img: obj,\n                demonstrate: \"correct\",\n                message: \"You won the game!\",\n                topScore: this.state.score > this.state.topScore ? this.state.score : this.state.topScore,\n                images: shuffle(this.state.img)\n            });\n            this.setState({ score: 0 });\n            setTimeout(() => {\n                this.setState({ demonstrate: \"\" })\n            }, 400);\n        } else if (this.state.img[id].clicked) {\n            let obj = this.state.img;\n            for (var ele in obj) {\n                obj[ele].clicked = false;\n            }\n            this.setState({\n                img: obj, \n                demonstrate: \"incorrect\",\n                message: \"You are incorrect!\",\n                topScore: this.state.score > this.state.topScore ? this.state.score : this.state.topScore,\n                images: shuffle(this.state.img)\n            });\n            this.setState({ score: 0 });\n            setTimeout(() => {\n                this.setState({ demonstrate: \"\" })\n            }, 400);\n        } else {\n            let obj = this.state.img;\n            obj[id].clicked = true;\n            this.setState({\n                img: obj,\n                score: this.state.score + 1,\n                demonstrate: \"correct\",\n                message: \"You are correct!\",\n                images: shuffle(this.state.img)\n            });\n            setTimeout(() => {\n                this.setState({ demonstrate: \"\" })\n            }, 400);\n        }\n\n        // append img into an array again and shuffle the position, then append it to \"this.state.images\"\n    };\n\n    componentDidMount() {\n        this.setState({images: shuffle(this.state.img)});\n    };\n\n    render() {\n        return(\n            <div>\n                <Navbar score={this.state.score} topScore={this.state.topScore} demonstrate={this.state.demonstrate} message={this.state.message}/>\n                <Header />\n                <Image results={this.state.images} handleOnClick={this.handleOnClick}/>\n            </div>\n        );\n    }\n}\n\nexport default ReactContainer;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ResultContainer from \"./components/ResultContainer\";\n\n\nfunction App() {\n  return (\n    <ResultContainer />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}